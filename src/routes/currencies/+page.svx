
<script>

  // import { BasicConverter, ChatConverter, ChitChatConverter, RubeConverter, ConciergeConverter } from '@yawnxyz/playground';
  import BasicConverter from '@yawnxyz/playground/BasicConverter.svelte';
  // import { currencies } from '@yawnxyz/playground';

  // let { 
  //   BasicConverter,
  //   ChatConverter,
  //   ChitChatConverter,
  //   RubeConverter,
  //   ConciergeConverter
  // } = currencies;

</script>

<div class="bg-red-500 p-16">
  <!-- <div class="bg-accent hover:text-accent-foreground">THIS IS TEXT</div> -->
</div>

<!-- <div role="button" aria-label="Wednesday, February 28, 2024" aria-disabled="true" data-value="2024-02-28" data-disabled="" data-outside-month="" data-outside-visible-months="" data-melt-calendar-cell="" data-calendar-day="" class="inline-flex items-center justify-center rounded-md text-sm whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 w-9 p-0 font-normal [&amp;[data-today]:not([data-selected])]:bg-accent [&amp;[data-today]:not([data-selected])]:text-accent-foreground data-[selected]:bg-primary data-[selected]:text-primary-foreground data-[selected]:opacity-100 data-[selected]:hover:bg-primary data-[selected]:hover:text-primary-foreground data-[selected]:focus:bg-primary data-[selected]:focus:text-primary-foreground data-[disabled]:text-muted-foreground data-[disabled]:opacity-50 data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through data-[outside-month]:pointer-events-none data-[outside-month]:text-muted-foreground data-[outside-month]:opacity-50 [&amp;[data-outside-month][data-selected]]:bg-accent/50 [&amp;[data-outside-month][data-selected]]:text-muted-foreground [&amp;[data-outside-month][data-selected]]:opacity-30">28</div> -->
<!-- <div tabindex="-1" id="QvemDANtOS" data-state="open" data-portal="" data-melt-popover-content="" data-popover-content="" class="z-50 rounded-md border bg-popover text-popover-foreground shadow-md outline-none w-[200px] p-0" style="position: absolute; top: 590px; left: 287px;" data-escapee="" data-side="bottom" data-align="center"><div role="application" id="cURzsr8njE" data-cmdk-root="" class="flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground"><label data-cmdk-label="" for="R8YxiYY0z5" id="8jLatBx60v" style="position: absolute; width: 1px; height: 1px; padding: 0px; margin: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px);"></label> <div class="flex items-center border-b px-2" data-cmdk-input-wrapper=""><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide-icon lucide lucide-search mr-2 h-4 w-4 shrink-0 opacity-50"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg> <input type="text" data-cmdk-input="" autocomplete="off" autocorrect="off" spellcheck="false" aria-autocomplete="list" role="combobox" aria-expanded="true" aria-controls="mmAAzdl4mU" aria-labelledby="8jLatBx60v" id="R8YxiYY0z5" class="flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50" placeholder="Search currencies..." aria-activedescendant="A5h_PA1VNy"></div>  <div data-cmdk-group="" role="presentation" data-value="usd us dollar cad canadian dollar eur euro aud australian dollar" class="overflow-hidden p-1 text-foreground [&amp;_[data-cmdk-group-heading]]:px-2 [&amp;_[data-cmdk-group-heading]]:py-1.5 [&amp;_[data-cmdk-group-heading]]:text-xs [&amp;_[data-cmdk-group-heading]]:font-medium [&amp;_[data-cmdk-group-heading]]:text-muted-foreground max-h-48 overflow-y-auto"> <div data-cmdk-group-items="" role="group"><div data-cmdk-item="" data-value="USD" role="option" id="A5h_PA1VNy" class="relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50" aria-selected="true" data-selected="true"><span>USD</span> <span class="ml-2 text-sm text-gray-500 baseline">US Dollar</span> </div><div data-cmdk-item="" data-value="CAD" role="option" id="6-bzd9piYA" class="relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"><span>CAD</span> <span class="ml-2 text-sm text-gray-500 baseline">Canadian Dollar</span> </div><div data-cmdk-item="" data-value="EUR" role="option" id="lyA5Jctk1y" class="relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"><span>EUR</span> <span class="ml-2 text-sm text-gray-500 baseline">Euro</span> </div><div data-cmdk-item="" data-value="AUD" role="option" id="shsmGT2cNT" class="relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"><span>AUD</span> <span class="ml-2 text-sm text-gray-500 baseline">Australian Dollar</span> </div></div></div></div></div> -->

<!-- <button type="button" tabindex="0" role="button" aria-haspopup="dialog" aria-expanded="true" data-state="open" id="2CYRy_idbu" data-melt-popover-trigger="" data-popover-trigger="" class="inline-flex items-center rounded-md text-sm whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 py-2 flex-1 px-1 md:px-4 md:w-[240px] justify-start text-left font-normal overflow-hidden" data-button-root=""><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4"><path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 1C4.77614 1 5 1.22386 5 1.5V2H10V1.5C10 1.22386 10.2239 1 10.5 1C10.7761 1 11 1.22386 11 1.5V2H12.5C13.3284 2 14 2.67157 14 3.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V3.5C1 2.67157 1.67157 2 2.5 2H4V1.5C4 1.22386 4.22386 1 4.5 1ZM10 3V3.5C10 3.77614 10.2239 4 10.5 4C10.7761 4 11 3.77614 11 3.5V3H12.5C12.7761 3 13 3.22386 13 3.5V5H2V3.5C2 3.22386 2.22386 3 2.5 3H4V3.5C4 3.77614 4.22386 4 4.5 4C4.77614 4 5 3.77614 5 3.5V3H10ZM2 6V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V6H2ZM7 7.5C7 7.22386 7.22386 7 7.5 7C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8C7.22386 8 7 7.77614 7 7.5ZM9.5 7C9.22386 7 9 7.22386 9 7.5C9 7.77614 9.22386 8 9.5 8C9.77614 8 10 7.77614 10 7.5C10 7.22386 9.77614 7 9.5 7ZM11 7.5C11 7.22386 11.2239 7 11.5 7C11.7761 7 12 7.22386 12 7.5C12 7.77614 11.7761 8 11.5 8C11.2239 8 11 7.77614 11 7.5ZM11.5 9C11.2239 9 11 9.22386 11 9.5C11 9.77614 11.2239 10 11.5 10C11.7761 10 12 9.77614 12 9.5C12 9.22386 11.7761 9 11.5 9ZM9 9.5C9 9.22386 9.22386 9 9.5 9C9.77614 9 10 9.22386 10 9.5C10 9.77614 9.77614 10 9.5 10C9.22386 10 9 9.77614 9 9.5ZM7.5 9C7.22386 9 7 9.22386 7 9.5C7 9.77614 7.22386 10 7.5 10C7.77614 10 8 9.77614 8 9.5C8 9.22386 7.77614 9 7.5 9ZM5 9.5C5 9.22386 5.22386 9 5.5 9C5.77614 9 6 9.22386 6 9.5C6 9.77614 5.77614 10 5.5 10C5.22386 10 5 9.77614 5 9.5ZM3.5 9C3.22386 9 3 9.22386 3 9.5C3 9.77614 3.22386 10 3.5 10C3.77614 10 4 9.77614 4 9.5C4 9.22386 3.77614 9 3.5 9ZM3 11.5C3 11.2239 3.22386 11 3.5 11C3.77614 11 4 11.2239 4 11.5C4 11.7761 3.77614 12 3.5 12C3.22386 12 3 11.7761 3 11.5ZM5.5 11C5.22386 11 5 11.2239 5 11.5C5 11.7761 5.22386 12 5.5 12C5.77614 12 6 11.7761 6 11.5C6 11.2239 5.77614 11 5.5 11ZM7 11.5C7 11.2239 7.22386 11 7.5 11C7.77614 11 8 11.2239 8 11.5C8 11.7761 7.77614 12 7.5 12C7.22386 12 7 11.7761 7 11.5ZM9.5 11C9.22386 11 9 11.2239 9 11.5C9 11.7761 9.22386 12 9.5 12C9.77614 12 10 11.7761 10 11.5C10 11.2239 9.77614 11 9.5 11Z" fill="currentColor"></path></svg> March 16, 2024</button> -->


# Supercharge your interfaces (by sprinkling some AI)

Titles: Supercharge your interfaces (by sprinkling some AI)
How to make your interfaces do more with less



# GOAL 1: ESTABLISH NORM / TRAD vs. Chatbot PROBLEMS

## part 1: basic transactional component

Imagine you're in the early pre-chatbot 2020s. Here's a simple currency converter. It does what you expect, convert a certain amount from one currency to another.
Decent affordance. Teaches / reminds you what to do next. Transactional. You set the parameters and you get something out, like a vending machine.

Hit the rocket ðŸš€ to see what happens!

what ughh
<BasicConverter />



<!-- 
<ConciergeConverter />
This is a transactional interaction with decent affordance
    3. This is great for one-off conversions
        1. Decent affordance â€” you know what you can do with it; if youâ€™ve never done money conversions before, this will show you what you should be expected to do when converting money
        2. Main usage is you click around, and it gives you an answer
    4. Need to come back to this interface to do the conversion
        1. Need to remember how to find it (through a click)
        2. Or use a system that supports command+k interfaces to get to it
    5. Fixed capabilities! Any new / deviant capabilities have to be designed
    6. New affordances need to be added

Under the hood, it takes the inputs, converts it to request data, sends it to server, and gets back a bunch of results. In this version, we can see multiple requests and multiple results. Try clicking more

## part 2: a pure chatbot version of a converter


Now let's jump to 2024, after chatbots have taken over the world. This is what that looks like:

<ChatConverter />

- Currently only supposed to support CAD/EUR/AUD/USD. try $100 CAD to EUR, $100 AUD to USD. Try using natural language like 'what's $100 canadian in aussie' And try something like pesos
You can ask it to convert, but you have to type! You have to tell it all the right things (which you might not remember to do). It lacks affordances. You prefer a clickable interface (above). You start thinking about how designers should come up with better designs, other than chatbots.
Previously I limited conversions between USD / CAD / EUR / AUD. You'd never be able to tell from this interface. I'd have to slap an instruction manual / FAQ to tell you what it can and can't do. In the previous example you didn't have to guess, all the options were in the interface
- it's nice you can do natural language though!
- ask it to "tell me a llama joke

add a bit about how a prompt can be a button, and how it's not just a chatbot, but a button that runs a chatbot in the background

<ChitChatConverter cta="USD â†’ CAD" prompt="what's $100 USD to CAD? Only return a number and currency sign" />
<ChitChatConverter cta="USD â†’ EUR" prompt="what's $100 USD to EUR? Only return a number and currency sign" />
<ChitChatConverter cta="USD â†’ AUD" prompt="what's $100 USD to AUD? Only return a number and currency sign" />

But you can also do funky stuff like this, in a button. In the back, this just runs GPT with function calling

<ChitChatConverter cta="USD â†’ CAD, EUR, AUD" prompt="what's $100 USD to ```(CAD, EUR, and AUD)```? Please use function calling, once for each pair, THREE TIMES â€” return the answer for CAD, EUR aud AUD; Ignore previous instructions for outputting answer as an object, OUTPUT YOUR ANSWER IN AN ENGLISH SENTENCE with money symbols" />


# Goal 2: FUNCTION CALLING 

An interface just calls a function / API under the hood. You can use AI to do this too now with function calling

# GOAL 2b: YOU CAN DESIGN ALL SORTS OF AFFORDANCES AROUND PROMPTS + function calling loops!


# GOAL 2: You can eve calling is GREAT for testing novel interfaces 


<RubeConverter />

((custom "faked" UI w/ chatbot in the background // return a table of results))
CHATBOTS ARE GREAT FOR RUNNING CODE YOU DONT WANT TO BUILD
- Special button thatâ€™s hard to build but just runs ChatGPT in the back
- Power is not just nlp prompting - but executing compound tasks - markdown outputs; multiple currencies under the hood / multi task execution
- Design a new interface with amount / Multiple currencies as multi-checkbox
- Input: multiple currencies
- Output tabular
- THIS LOOKS LIKE A REAL WIDGET/INTERFACE BUT USES FX CALLING IN THE BACKGROUND
- rube goldberg version of chat converter
- the downside is that when I was building this, GPT-3.5 was too stupid to get the answer right / come up with too many or too few responses. Selecting the model matters, and I think Claude's Sonnet would be better here
- you have to design (and code) for situations where... the result is not what you expect. Your designers and devs might actually hate this more
- in some ways this is closer to no-code bc you can design a custom UI, but have less control over how things work in the back
- when I built this I thought it'd be really quick; instead I was struggling with GPT-4 (it worked when I wrote the prompt, but that evening for some reason nothing worked)
- GPT-4-driven UI is going to be way more unpredictable, but powerful for prototyping
- Annoying prompt in the background / share the prompt





# GOAL 3: SUGGEST CONCIERGE MODE FOR CONVERTER / also good for UI you don't want to design

## part 3: traditional component but with "concierge" mode

Let's try a middle ground! Our simple, transactional converter only creates affordance for a single use case.
What if you could flip a switch so a component could "do more than" its basic design affordances? We wouldn't want designers to account for every iteration, so LLMs can do the "other" stuff

What if we had to convert many currencies? We'd have to click a bunch of times to get the answers.

Right? It's super annoying. A designer needs to create a custom interface, with proper affordances, for this use case. It takes a lot of time and effort. Couldn't we just ask a robot for it? Here we can ask the robot to do a bunch of conversions for us instead.

((
  INSERT CHATBOT CONVERTER w/ CONCIERGE mode WITH AGENTIC/FSM CAPABILITIES / MULTIPLE REQUESTS
  - show data mode of requests/inputs/outputs and how they can be chained
))

This is neat and saves the design team a lot of time! But how about the affordances? We don't always need to use chat! We can create the prompts/buttons ahead of time, and show them to the user as options

((what's $100 in USD to CAD?)) - show that these don't even need to be AI. Still affordances / suggestions
((insert a button that says "convert a bunch of currencies to USD" )) - batch job using AI, but you wouldn't need to know that
((other pre-populated questions))

the more complex your tasks/use cases/jobs, the harder it is to design an interfaces w/ the right affordances for the job. We can offload some of this work to the AI instead.

((show compound button w/ editable text / you can click to calculate ))
you can ask it all kinds of weird stuff no designer is going to design: "how did the USD compare to other currencies in 1980 vs. today?"


<ConciergeConverter />


# GOAL 3: WHAT IF CONCIERGE MODE WAS EVERYWHERE?


Idea: concierge mode / batch mode / random stuff mode
- eg setting alarms every hour between x time
- Run into walls that it canâ€™t do / not too magical
- eg Apple shortcuts / Automator 

Add a round MAGIC button to the component which flips it into concierge mode


But wait? Doesn't this open up all kinds of nasty new security holes? Yes, yes it does
 -->



<style lang="scss" global>

  // overrides for currencies demo
  input {
    width: inherit !important;
    margin-top: 0 !important;
  }

  input, button {
    // background: white !important;
  }


  h1 {
    @apply text-2xl font-bold mb-4 mt-4;
  }
  h2 {
    @apply text-xl font-bold mb-4 mt-8;
  }
  h3 {
    @apply text-lg font-bold mb-4;
  }
  p {
    @apply mb-4;
  }

  a {
    @apply text-blue-500 hover:underline cursor-pointer hover:cursor-pointer;
  }

  pre {
    @apply bg-gray-200 rounded p-4;
  }
</style>
